<?php
/**
 * @author  Axel Seemann <kummeraxel@gmail.com>
 * @licence AGPL-v3
 * @link    https://github.com/aseemann
 */

namespace ASeemann\PhpLiveLog\Tests;

use ASeemann\PhpLiveLog\Constants;
use ASeemann\PhpLiveLog\Cookie;
use ASeemann\PhpLiveLog\LogFile;
use ASeemann\PhpLiveLog\LogLine;
use PHPUnit\Framework\TestCase;
use Psr\Log\LogLevel;
use Ramsey\Uuid\Uuid;

class LogFileTest extends TestCase
{
    /**
     * @var Cookie
     */
    private $cookie;

    /**
     * @var Uuid
     */
    private $uuid;

    public function setUp(): void
    {
        parent::setUp();

        $this->uuid = Uuid::uuid4();

        $mockObject = $this->getMockBuilder(Cookie::class)
                           ->onlyMethods(['setCookie'])
                           ->getMock();

        $mockObject->setUuid($this->uuid);

        $_COOKIE[Cookie::COOKIE_NAME] = $this->uuid->toString();

        $mockObject->method('setCookie')
                   ->willReturnSelf();

        $this->cookie = $mockObject;
    }

    public function testReadLogLinesFileDoesNotExistsYet()
    {
        $logFile = new LogFile($this->cookie);

        $this->assertEmpty($logFile->readLogLines());
        $this->assertIsArray($logFile->readLogLines());
        $this->assertSame($logFile->getLastReadLine(), 0);
    }

    public function testReadLogLinesFileIsEmpty()
    {
        $path = sprintf(Constants::LOG_FILE_PATH_PATTERN, $this->uuid);

        touch($path);

        $logFile = new LogFile($this->cookie);

        $this->assertEmpty($logFile->readLogLines());
        $this->assertIsArray($logFile->readLogLines());
        $this->assertSame($logFile->getLastReadLine(), 0);
    }

    public function testWriteAndReadLines()
    {
        $logFile = new LogFile($this->cookie);

        $logFile->writeLogLine(
            new LogLine(
                'test',
                'test',
                '1',
                '/' . __FILE__,
                LogLevel::DEBUG,
                'test 1'
            )
        );

        $lines1 = $logFile->readLogLines();

        $this->assertIsArray($lines1);
        $this->assertCount(1, $lines1);
        $this->assertSame(1, $logFile->getLastReadLine());

        $logFile->writeLogLine(
            new LogLine(
                'test',
                'test',
                '1',
                '/' . __FILE__,
                LogLevel::DEBUG,
                'test 2'
            )
        );

        $logFile->writeLogLine(
            new LogLine(
                'test',
                'test',
                '1',
                '/' . __FILE__,
                LogLevel::DEBUG,
                'test 3'
            )
        );

        $logFile->writeLogLine(
            new LogLine(
                'test',
                'test',
                '1',
                '/' . __FILE__,
                LogLevel::DEBUG,
                'test 4'
            )
        );

        $lines2 = $logFile->readLogLines($logFile->getLastReadLine());

        $this->assertNotContains(reset($lines1), $lines2);
        $this->assertCount(3, $lines2);
        $this->assertSame(4, $logFile->getLastReadLine());
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        shell_exec('rm -f ' . sprintf(Constants::LOG_FILE_PATH_PATTERN, '*'));
    }
}
